"use strict";
const electron = require("electron");
const channel = {
  app: {
    getPath: "getPath"
  },
  dialog: "dialog",
  path: {
    resolve: "resolve",
    join: "join",
    sep: "sep"
  },
  fs: {
    existsSync: "existsSync",
    removeSync: "removeSync",
    emptyDirSync: "emptyDirSync"
  },
  store: {
    get: "get",
    set: "set"
  },
  git: {
    repositoryAuthUrl: "repositoryAuthUrl",
    branchSummary: "branchSummary",
    logResult: "logResult"
  }
};
electron.contextBridge.exposeInMainWorld("electron", {
  app: {
    getPath(...args) {
      return electron.ipcRenderer.sendSync(channel.app.getPath, ...args);
    }
  },
  async dialog(options) {
    const result = await electron.ipcRenderer.invoke(channel.dialog, options);
    return result;
  },
  path: {
    resolve(...args) {
      return electron.ipcRenderer.sendSync(channel.path.resolve, ...args);
    },
    join(...args) {
      return electron.ipcRenderer.sendSync(channel.path.join, ...args);
    },
    sep() {
      return electron.ipcRenderer.sendSync(channel.path.sep);
    }
  },
  fs: {
    existsSync(...args) {
      return electron.ipcRenderer.sendSync(channel.fs.existsSync, ...args);
    },
    removeSync(...args) {
      return electron.ipcRenderer.sendSync(channel.fs.removeSync, ...args);
    },
    emptyDirSync(...args) {
      return electron.ipcRenderer.sendSync(channel.fs.emptyDirSync, ...args);
    }
  },
  store: {
    get(key, defaultValue) {
      return electron.ipcRenderer.sendSync(channel.store.get, key, defaultValue);
    },
    set(...args) {
      electron.ipcRenderer.send(channel.store.set, ...args);
    }
  },
  git: {
    async repositoryAuthUrl(url, username, password) {
      const result = await electron.ipcRenderer.invoke(
        channel.git.repositoryAuthUrl,
        url,
        username,
        password
      );
      return result;
    },
    async branchSummary(directoryPath, repositoryAuthUrl) {
      const result = await electron.ipcRenderer.invoke(
        channel.git.branchSummary,
        directoryPath,
        repositoryAuthUrl
      );
      return result;
    },
    async logResult(directoryPath, logOptions) {
      const result = await electron.ipcRenderer.invoke(channel.git.logResult, directoryPath, logOptions);
      return result;
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzIiwic291cmNlcyI6WyIuLi8uLi9jb21tb24vc3JjL2NoYW5uZWwudHMiLCIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICBhcHA6IHtcbiAgICBnZXRQYXRoOiAnZ2V0UGF0aCcsXG4gIH0sXG4gIGRpYWxvZzogJ2RpYWxvZycsXG4gIHBhdGg6IHtcbiAgICByZXNvbHZlOiAncmVzb2x2ZScsXG4gICAgam9pbjogJ2pvaW4nLFxuICAgIHNlcDogJ3NlcCcsXG4gIH0sXG4gIGZzOiB7XG4gICAgZXhpc3RzU3luYzogJ2V4aXN0c1N5bmMnLFxuICAgIHJlbW92ZVN5bmM6ICdyZW1vdmVTeW5jJyxcbiAgICBlbXB0eURpclN5bmM6ICdlbXB0eURpclN5bmMnLFxuICB9LFxuICBzdG9yZToge1xuICAgIGdldDogJ2dldCcsXG4gICAgc2V0OiAnc2V0JyxcbiAgfSxcbiAgZ2l0OiB7XG4gICAgcmVwb3NpdG9yeUF1dGhVcmw6ICdyZXBvc2l0b3J5QXV0aFVybCcsXG4gICAgYnJhbmNoU3VtbWFyeTogJ2JyYW5jaFN1bW1hcnknLFxuICAgIGxvZ1Jlc3VsdDogJ2xvZ1Jlc3VsdCcsXG4gIH0sXG59O1xuIiwiLyogZXNsaW50LWVudiBub2RlICovXG4vKipcbiAqIFRoaXMgZmlsZSBpcyB1c2VkIHNwZWNpZmljYWxseSBmb3Igc2VjdXJpdHkgcmVhc29ucy5cbiAqIEhlcmUgeW91IGNhbiBhY2Nlc3MgTm9kZWpzIHN0dWZmIGFuZCBpbmplY3QgZnVuY3Rpb25hbGl0eSBpbnRvXG4gKiB0aGUgcmVuZGVyZXIgdGhyZWFkIChhY2Nlc3NpYmxlIHRoZXJlIHRocm91Z2ggdGhlIFwid2luZG93XCIgb2JqZWN0KVxuICpcbiAqIFdBUk5JTkchXG4gKiBJZiB5b3UgaW1wb3J0IGFueXRoaW5nIGZyb20gbm9kZV9tb2R1bGVzLCB0aGVuIG1ha2Ugc3VyZSB0aGF0IHRoZSBwYWNrYWdlIGlzIHNwZWNpZmllZFxuICogaW4gcGFja2FnZS5qc29uID4gZGVwZW5kZW5jaWVzIGFuZCBOT1QgaW4gZGV2RGVwZW5kZW5jaWVzXG4gKlxuICogRXhhbXBsZSAoaW5qZWN0cyB3aW5kb3cubXlBUEkuZG9BVGhpbmcoKSBpbnRvIHJlbmRlcmVyIHRocmVhZCk6XG4gKlxuICogICBpbXBvcnQgeyBjb250ZXh0QnJpZGdlIH0gZnJvbSAnZWxlY3Ryb24nXG4gKlxuICogICBjb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdteUFQSScsIHtcbiAqICAgICBkb0FUaGluZzogKCkgPT4ge31cbiAqICAgfSlcbiAqL1xuXG5pbXBvcnQgdHlwZSB7V2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzfSBmcm9tICcqLnZ1ZXx0c3x0c3gnO1xuaW1wb3J0IGNoYW5uZWwgZnJvbSAnQC9jb21tb24vY2hhbm5lbCc7XG5pbXBvcnQgdHlwZSB7T3BlbkRpYWxvZ09wdGlvbnMsIE9wZW5EaWFsb2dSZXR1cm5WYWx1ZX0gZnJvbSAnZWxlY3Ryb24nO1xuaW1wb3J0IHtjb250ZXh0QnJpZGdlLCBpcGNSZW5kZXJlcn0gZnJvbSAnZWxlY3Ryb24nO1xuXG5jb250ZXh0QnJpZGdlLmV4cG9zZUluTWFpbldvcmxkKCdlbGVjdHJvbicsIHtcbiAgYXBwOiB7XG4gICAgZ2V0UGF0aCguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ2FwcCddWydnZXRQYXRoJ10pIHtcbiAgICAgIHJldHVybiBpcGNSZW5kZXJlci5zZW5kU3luYyhjaGFubmVsLmFwcC5nZXRQYXRoLCAuLi5hcmdzKTtcbiAgICB9LFxuICB9LFxuICBhc3luYyBkaWFsb2cob3B0aW9uczogT3BlbkRpYWxvZ09wdGlvbnMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpcGNSZW5kZXJlci5pbnZva2UoY2hhbm5lbC5kaWFsb2csIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHQgYXMgT3BlbkRpYWxvZ1JldHVyblZhbHVlO1xuICB9LFxuICBwYXRoOiB7XG4gICAgcmVzb2x2ZSguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ3BhdGgnXVsncmVzb2x2ZSddKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5wYXRoLnJlc29sdmUsIC4uLmFyZ3MpO1xuICAgIH0sXG4gICAgam9pbiguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ3BhdGgnXVsnam9pbiddKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5wYXRoLmpvaW4sIC4uLmFyZ3MpO1xuICAgIH0sXG4gICAgc2VwKCkge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwucGF0aC5zZXApO1xuICAgIH0sXG4gIH0sXG4gIGZzOiB7XG4gICAgZXhpc3RzU3luYyguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ2ZzJ11bJ2V4aXN0c1N5bmMnXSkge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwuZnMuZXhpc3RzU3luYywgLi4uYXJncyk7XG4gICAgfSxcbiAgICByZW1vdmVTeW5jKC4uLmFyZ3M6IFdpbmRvd0VsZWN0cm9uUGFyYW1ldGVyc1snZnMnXVsncmVtb3ZlU3luYyddKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5mcy5yZW1vdmVTeW5jLCAuLi5hcmdzKTtcbiAgICB9LFxuICAgIGVtcHR5RGlyU3luYyguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ2ZzJ11bJ2VtcHR5RGlyU3luYyddKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5mcy5lbXB0eURpclN5bmMsIC4uLmFyZ3MpO1xuICAgIH0sXG4gIH0sXG4gIHN0b3JlOiB7XG4gICAgZ2V0KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiB1bmtub3duKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5zdG9yZS5nZXQsIGtleSwgZGVmYXVsdFZhbHVlKTtcbiAgICB9LFxuICAgIHNldCguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ3N0b3JlJ11bJ3NldCddKSB7XG4gICAgICBpcGNSZW5kZXJlci5zZW5kKGNoYW5uZWwuc3RvcmUuc2V0LCAuLi5hcmdzKTtcbiAgICB9LFxuICB9LFxuICBnaXQ6IHtcbiAgICBhc3luYyByZXBvc2l0b3J5QXV0aFVybCh1cmw6IHN0cmluZywgdXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaXBjUmVuZGVyZXIuaW52b2tlKFxuICAgICAgICBjaGFubmVsLmdpdC5yZXBvc2l0b3J5QXV0aFVybCxcbiAgICAgICAgdXJsLFxuICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQsXG4gICAgICApO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIGFzeW5jIGJyYW5jaFN1bW1hcnkoZGlyZWN0b3J5UGF0aDogc3RyaW5nLCByZXBvc2l0b3J5QXV0aFVybDogc3RyaW5nKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpcGNSZW5kZXJlci5pbnZva2UoXG4gICAgICAgIGNoYW5uZWwuZ2l0LmJyYW5jaFN1bW1hcnksXG4gICAgICAgIGRpcmVjdG9yeVBhdGgsXG4gICAgICAgIHJlcG9zaXRvcnlBdXRoVXJsLFxuICAgICAgKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBhc3luYyBsb2dSZXN1bHQoZGlyZWN0b3J5UGF0aDogc3RyaW5nLCBsb2dPcHRpb25zOiBzdHJpbmdbXSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaXBjUmVuZGVyZXIuaW52b2tlKGNoYW5uZWwuZ2l0LmxvZ1Jlc3VsdCwgZGlyZWN0b3J5UGF0aCwgbG9nT3B0aW9ucyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gIH0sXG59KTtcbiJdLCJuYW1lcyI6WyJjb250ZXh0QnJpZGdlIiwiaXBjUmVuZGVyZXIiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBZSxVQUFBO0FBQUEsRUFDYixLQUFLO0FBQUEsSUFDSCxTQUFTO0FBQUEsRUFDWDtBQUFBLEVBQ0EsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLElBQ0osU0FBUztBQUFBLElBQ1QsTUFBTTtBQUFBLElBQ04sS0FBSztBQUFBLEVBQ1A7QUFBQSxFQUNBLElBQUk7QUFBQSxJQUNGLFlBQVk7QUFBQSxJQUNaLFlBQVk7QUFBQSxJQUNaLGNBQWM7QUFBQSxFQUNoQjtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLElBQ0wsS0FBSztBQUFBLEVBQ1A7QUFBQSxFQUNBLEtBQUs7QUFBQSxJQUNILG1CQUFtQjtBQUFBLElBQ25CLGVBQWU7QUFBQSxJQUNmLFdBQVc7QUFBQSxFQUNiO0FBQ0Y7QUNBQUEsU0FBQUEsY0FBYyxrQkFBa0IsWUFBWTtBQUFBLEVBQzFDLEtBQUs7QUFBQSxJQUNILFdBQVcsTUFBa0Q7QUFDM0QsYUFBT0MsU0FBQUEsWUFBWSxTQUFTLFFBQVEsSUFBSSxTQUFTLEdBQUcsSUFBSTtBQUFBLElBQzFEO0FBQUEsRUFDRjtBQUFBLEVBQ0EsTUFBTSxPQUFPLFNBQTRCO0FBQ3ZDLFVBQU0sU0FBUyxNQUFNQSxxQkFBWSxPQUFPLFFBQVEsUUFBUSxPQUFPO0FBQ3hELFdBQUE7QUFBQSxFQUNUO0FBQUEsRUFDQSxNQUFNO0FBQUEsSUFDSixXQUFXLE1BQW1EO0FBQzVELGFBQU9BLFNBQUFBLFlBQVksU0FBUyxRQUFRLEtBQUssU0FBUyxHQUFHLElBQUk7QUFBQSxJQUMzRDtBQUFBLElBQ0EsUUFBUSxNQUFnRDtBQUN0RCxhQUFPQSxTQUFBQSxZQUFZLFNBQVMsUUFBUSxLQUFLLE1BQU0sR0FBRyxJQUFJO0FBQUEsSUFDeEQ7QUFBQSxJQUNBLE1BQU07QUFDSixhQUFPQSxTQUFZLFlBQUEsU0FBUyxRQUFRLEtBQUssR0FBRztBQUFBLElBQzlDO0FBQUEsRUFDRjtBQUFBLEVBQ0EsSUFBSTtBQUFBLElBQ0YsY0FBYyxNQUFvRDtBQUNoRSxhQUFPQSxTQUFBQSxZQUFZLFNBQVMsUUFBUSxHQUFHLFlBQVksR0FBRyxJQUFJO0FBQUEsSUFDNUQ7QUFBQSxJQUNBLGNBQWMsTUFBb0Q7QUFDaEUsYUFBT0EsU0FBQUEsWUFBWSxTQUFTLFFBQVEsR0FBRyxZQUFZLEdBQUcsSUFBSTtBQUFBLElBQzVEO0FBQUEsSUFDQSxnQkFBZ0IsTUFBc0Q7QUFDcEUsYUFBT0EsU0FBQUEsWUFBWSxTQUFTLFFBQVEsR0FBRyxjQUFjLEdBQUcsSUFBSTtBQUFBLElBQzlEO0FBQUEsRUFDRjtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsSUFBSSxLQUFhLGNBQXdCO0FBQ3ZDLGFBQU9BLFNBQUFBLFlBQVksU0FBUyxRQUFRLE1BQU0sS0FBSyxLQUFLLFlBQVk7QUFBQSxJQUNsRTtBQUFBLElBQ0EsT0FBTyxNQUFnRDtBQUNyREEsZUFBQSxZQUFZLEtBQUssUUFBUSxNQUFNLEtBQUssR0FBRyxJQUFJO0FBQUEsSUFDN0M7QUFBQSxFQUNGO0FBQUEsRUFDQSxLQUFLO0FBQUEsSUFDSCxNQUFNLGtCQUFrQixLQUFhLFVBQWtCLFVBQWtCO0FBQ2pFLFlBQUEsU0FBUyxNQUFNQSxTQUFBQSxZQUFZO0FBQUEsUUFDL0IsUUFBUSxJQUFJO0FBQUEsUUFDWjtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsTUFBQTtBQUVLLGFBQUE7QUFBQSxJQUNUO0FBQUEsSUFDQSxNQUFNLGNBQWMsZUFBdUIsbUJBQTJCO0FBQzlELFlBQUEsU0FBUyxNQUFNQSxTQUFBQSxZQUFZO0FBQUEsUUFDL0IsUUFBUSxJQUFJO0FBQUEsUUFDWjtBQUFBLFFBQ0E7QUFBQSxNQUFBO0FBRUssYUFBQTtBQUFBLElBQ1Q7QUFBQSxJQUNBLE1BQU0sVUFBVSxlQUF1QixZQUFzQjtBQUNyRCxZQUFBLFNBQVMsTUFBTUEsU0FBWSxZQUFBLE9BQU8sUUFBUSxJQUFJLFdBQVcsZUFBZSxVQUFVO0FBQ2pGLGFBQUE7QUFBQSxJQUNUO0FBQUEsRUFDRjtBQUNGLENBQUM7In0=
