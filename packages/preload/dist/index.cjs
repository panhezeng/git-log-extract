"use strict";
const electron = require("electron");
const channel = {
  app: {
    getPath: "app.getPath"
  },
  dialog: "dialog",
  path: {
    resolve: "path.resolve",
    join: "path.join",
    sep: "path.sep"
  },
  fs: {
    existsSync: "fs.existsSync",
    removeSync: "fs.removeSync",
    emptyDirSync: "fs.emptyDirSync"
  },
  store: {
    get: "store.get",
    set: "store.set"
  },
  git: {
    repositoryAuthUrl: "git.repositoryAuthUrl",
    branchSummary: "git.branchSummary",
    logResult: "git.logResult"
  }
};
electron.contextBridge.exposeInMainWorld("electron", {
  app: {
    getPath(...args) {
      return electron.ipcRenderer.sendSync(channel.app.getPath, ...args);
    }
  },
  async dialog(options) {
    const result = await electron.ipcRenderer.invoke(channel.dialog, options);
    return result;
  },
  path: {
    resolve(...args) {
      return electron.ipcRenderer.sendSync(channel.path.resolve, ...args);
    },
    join(...args) {
      return electron.ipcRenderer.sendSync(channel.path.join, ...args);
    },
    sep: electron.ipcRenderer.sendSync(channel.path.sep)
  },
  fs: {
    existsSync(...args) {
      return electron.ipcRenderer.sendSync(channel.fs.existsSync, ...args);
    },
    removeSync(...args) {
      return electron.ipcRenderer.sendSync(channel.fs.removeSync, ...args);
    },
    emptyDirSync(...args) {
      return electron.ipcRenderer.sendSync(channel.fs.emptyDirSync, ...args);
    }
  },
  store: {
    get(key, defaultValue) {
      return electron.ipcRenderer.sendSync(channel.store.get, key, defaultValue);
    },
    set(...args) {
      electron.ipcRenderer.send(channel.store.set, ...args);
    }
  },
  git: {
    async repositoryAuthUrl(url, username, password) {
      const result = await electron.ipcRenderer.invoke(
        channel.git.repositoryAuthUrl,
        url,
        username,
        password
      );
      return result;
    },
    async branchSummary(directoryPath, repositoryAuthUrl) {
      const result = await electron.ipcRenderer.invoke(
        channel.git.branchSummary,
        directoryPath,
        repositoryAuthUrl
      );
      return result;
    },
    async logResult(directoryPath, logOptions) {
      const result = await electron.ipcRenderer.invoke(channel.git.logResult, directoryPath, logOptions);
      return result;
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzIiwic291cmNlcyI6WyIuLi8uLi9jb21tb24vc3JjL2NoYW5uZWwudHMiLCIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICBhcHA6IHtcbiAgICBnZXRQYXRoOiAnYXBwLmdldFBhdGgnLFxuICB9LFxuICBkaWFsb2c6ICdkaWFsb2cnLFxuICBwYXRoOiB7XG4gICAgcmVzb2x2ZTogJ3BhdGgucmVzb2x2ZScsXG4gICAgam9pbjogJ3BhdGguam9pbicsXG4gICAgc2VwOiAncGF0aC5zZXAnLFxuICB9LFxuICBmczoge1xuICAgIGV4aXN0c1N5bmM6ICdmcy5leGlzdHNTeW5jJyxcbiAgICByZW1vdmVTeW5jOiAnZnMucmVtb3ZlU3luYycsXG4gICAgZW1wdHlEaXJTeW5jOiAnZnMuZW1wdHlEaXJTeW5jJyxcbiAgfSxcbiAgc3RvcmU6IHtcbiAgICBnZXQ6ICdzdG9yZS5nZXQnLFxuICAgIHNldDogJ3N0b3JlLnNldCcsXG4gIH0sXG4gIGdpdDoge1xuICAgIHJlcG9zaXRvcnlBdXRoVXJsOiAnZ2l0LnJlcG9zaXRvcnlBdXRoVXJsJyxcbiAgICBicmFuY2hTdW1tYXJ5OiAnZ2l0LmJyYW5jaFN1bW1hcnknLFxuICAgIGxvZ1Jlc3VsdDogJ2dpdC5sb2dSZXN1bHQnLFxuICB9LFxufTtcbiIsIi8qIGVzbGludC1lbnYgbm9kZSAqL1xuLyoqXG4gKiBUaGlzIGZpbGUgaXMgdXNlZCBzcGVjaWZpY2FsbHkgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG4gKiBIZXJlIHlvdSBjYW4gYWNjZXNzIE5vZGVqcyBzdHVmZiBhbmQgaW5qZWN0IGZ1bmN0aW9uYWxpdHkgaW50b1xuICogdGhlIHJlbmRlcmVyIHRocmVhZCAoYWNjZXNzaWJsZSB0aGVyZSB0aHJvdWdoIHRoZSBcIndpbmRvd1wiIG9iamVjdClcbiAqXG4gKiBXQVJOSU5HIVxuICogSWYgeW91IGltcG9ydCBhbnl0aGluZyBmcm9tIG5vZGVfbW9kdWxlcywgdGhlbiBtYWtlIHN1cmUgdGhhdCB0aGUgcGFja2FnZSBpcyBzcGVjaWZpZWRcbiAqIGluIHBhY2thZ2UuanNvbiA+IGRlcGVuZGVuY2llcyBhbmQgTk9UIGluIGRldkRlcGVuZGVuY2llc1xuICpcbiAqIEV4YW1wbGUgKGluamVjdHMgd2luZG93Lm15QVBJLmRvQVRoaW5nKCkgaW50byByZW5kZXJlciB0aHJlYWQpOlxuICpcbiAqICAgaW1wb3J0IHsgY29udGV4dEJyaWRnZSB9IGZyb20gJ2VsZWN0cm9uJ1xuICpcbiAqICAgY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnbXlBUEknLCB7XG4gKiAgICAgZG9BVGhpbmc6ICgpID0+IHt9XG4gKiAgIH0pXG4gKi9cblxuaW1wb3J0IHR5cGUge1dpbmRvd0VsZWN0cm9uUGFyYW1ldGVyc30gZnJvbSAnKi52dWV8dHN8dHN4JztcbmltcG9ydCBjaGFubmVsIGZyb20gJ0AvY29tbW9uL2NoYW5uZWwnO1xuaW1wb3J0IHR5cGUge09wZW5EaWFsb2dPcHRpb25zLCBPcGVuRGlhbG9nUmV0dXJuVmFsdWV9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7Y29udGV4dEJyaWRnZSwgaXBjUmVuZGVyZXJ9IGZyb20gJ2VsZWN0cm9uJztcblxuY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnZWxlY3Ryb24nLCB7XG4gIGFwcDoge1xuICAgIGdldFBhdGgoLi4uYXJnczogV2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzWydhcHAnXVsnZ2V0UGF0aCddKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5hcHAuZ2V0UGF0aCwgLi4uYXJncyk7XG4gICAgfSxcbiAgfSxcbiAgYXN5bmMgZGlhbG9nKG9wdGlvbnM6IE9wZW5EaWFsb2dPcHRpb25zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaXBjUmVuZGVyZXIuaW52b2tlKGNoYW5uZWwuZGlhbG9nLCBvcHRpb25zKTtcbiAgICByZXR1cm4gcmVzdWx0IGFzIE9wZW5EaWFsb2dSZXR1cm5WYWx1ZTtcbiAgfSxcbiAgcGF0aDoge1xuICAgIHJlc29sdmUoLi4uYXJnczogV2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzWydwYXRoJ11bJ3Jlc29sdmUnXSkge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwucGF0aC5yZXNvbHZlLCAuLi5hcmdzKTtcbiAgICB9LFxuICAgIGpvaW4oLi4uYXJnczogV2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzWydwYXRoJ11bJ2pvaW4nXSkge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwucGF0aC5qb2luLCAuLi5hcmdzKTtcbiAgICB9LFxuICAgIHNlcDogaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5wYXRoLnNlcCksXG4gIH0sXG4gIGZzOiB7XG4gICAgZXhpc3RzU3luYyguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ2ZzJ11bJ2V4aXN0c1N5bmMnXSkge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwuZnMuZXhpc3RzU3luYywgLi4uYXJncyk7XG4gICAgfSxcbiAgICByZW1vdmVTeW5jKC4uLmFyZ3M6IFdpbmRvd0VsZWN0cm9uUGFyYW1ldGVyc1snZnMnXVsncmVtb3ZlU3luYyddKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5mcy5yZW1vdmVTeW5jLCAuLi5hcmdzKTtcbiAgICB9LFxuICAgIGVtcHR5RGlyU3luYyguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ2ZzJ11bJ2VtcHR5RGlyU3luYyddKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5mcy5lbXB0eURpclN5bmMsIC4uLmFyZ3MpO1xuICAgIH0sXG4gIH0sXG4gIHN0b3JlOiB7XG4gICAgZ2V0KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiB1bmtub3duKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5zdG9yZS5nZXQsIGtleSwgZGVmYXVsdFZhbHVlKTtcbiAgICB9LFxuICAgIHNldCguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ3N0b3JlJ11bJ3NldCddKSB7XG4gICAgICBpcGNSZW5kZXJlci5zZW5kKGNoYW5uZWwuc3RvcmUuc2V0LCAuLi5hcmdzKTtcbiAgICB9LFxuICB9LFxuICBnaXQ6IHtcbiAgICBhc3luYyByZXBvc2l0b3J5QXV0aFVybCh1cmw6IHN0cmluZywgdXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaXBjUmVuZGVyZXIuaW52b2tlKFxuICAgICAgICBjaGFubmVsLmdpdC5yZXBvc2l0b3J5QXV0aFVybCxcbiAgICAgICAgdXJsLFxuICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgcGFzc3dvcmQsXG4gICAgICApO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIGFzeW5jIGJyYW5jaFN1bW1hcnkoZGlyZWN0b3J5UGF0aDogc3RyaW5nLCByZXBvc2l0b3J5QXV0aFVybDogc3RyaW5nKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpcGNSZW5kZXJlci5pbnZva2UoXG4gICAgICAgIGNoYW5uZWwuZ2l0LmJyYW5jaFN1bW1hcnksXG4gICAgICAgIGRpcmVjdG9yeVBhdGgsXG4gICAgICAgIHJlcG9zaXRvcnlBdXRoVXJsLFxuICAgICAgKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBhc3luYyBsb2dSZXN1bHQoZGlyZWN0b3J5UGF0aDogc3RyaW5nLCBsb2dPcHRpb25zOiBzdHJpbmdbXSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaXBjUmVuZGVyZXIuaW52b2tlKGNoYW5uZWwuZ2l0LmxvZ1Jlc3VsdCwgZGlyZWN0b3J5UGF0aCwgbG9nT3B0aW9ucyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gIH0sXG59KTtcbiJdLCJuYW1lcyI6WyJjb250ZXh0QnJpZGdlIiwiaXBjUmVuZGVyZXIiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBZSxVQUFBO0FBQUEsRUFDYixLQUFLO0FBQUEsSUFDSCxTQUFTO0FBQUEsRUFDWDtBQUFBLEVBQ0EsUUFBUTtBQUFBLEVBQ1IsTUFBTTtBQUFBLElBQ0osU0FBUztBQUFBLElBQ1QsTUFBTTtBQUFBLElBQ04sS0FBSztBQUFBLEVBQ1A7QUFBQSxFQUNBLElBQUk7QUFBQSxJQUNGLFlBQVk7QUFBQSxJQUNaLFlBQVk7QUFBQSxJQUNaLGNBQWM7QUFBQSxFQUNoQjtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLElBQ0wsS0FBSztBQUFBLEVBQ1A7QUFBQSxFQUNBLEtBQUs7QUFBQSxJQUNILG1CQUFtQjtBQUFBLElBQ25CLGVBQWU7QUFBQSxJQUNmLFdBQVc7QUFBQSxFQUNiO0FBQ0Y7QUNBQUEsU0FBQUEsY0FBYyxrQkFBa0IsWUFBWTtBQUFBLEVBQzFDLEtBQUs7QUFBQSxJQUNILFdBQVcsTUFBa0Q7QUFDM0QsYUFBT0MsU0FBQUEsWUFBWSxTQUFTLFFBQVEsSUFBSSxTQUFTLEdBQUcsSUFBSTtBQUFBLElBQzFEO0FBQUEsRUFDRjtBQUFBLEVBQ0EsTUFBTSxPQUFPLFNBQTRCO0FBQ3ZDLFVBQU0sU0FBUyxNQUFNQSxxQkFBWSxPQUFPLFFBQVEsUUFBUSxPQUFPO0FBQ3hELFdBQUE7QUFBQSxFQUNUO0FBQUEsRUFDQSxNQUFNO0FBQUEsSUFDSixXQUFXLE1BQW1EO0FBQzVELGFBQU9BLFNBQUFBLFlBQVksU0FBUyxRQUFRLEtBQUssU0FBUyxHQUFHLElBQUk7QUFBQSxJQUMzRDtBQUFBLElBQ0EsUUFBUSxNQUFnRDtBQUN0RCxhQUFPQSxTQUFBQSxZQUFZLFNBQVMsUUFBUSxLQUFLLE1BQU0sR0FBRyxJQUFJO0FBQUEsSUFDeEQ7QUFBQSxJQUNBLEtBQUtBLFNBQUFBLFlBQVksU0FBUyxRQUFRLEtBQUssR0FBRztBQUFBLEVBQzVDO0FBQUEsRUFDQSxJQUFJO0FBQUEsSUFDRixjQUFjLE1BQW9EO0FBQ2hFLGFBQU9BLFNBQUFBLFlBQVksU0FBUyxRQUFRLEdBQUcsWUFBWSxHQUFHLElBQUk7QUFBQSxJQUM1RDtBQUFBLElBQ0EsY0FBYyxNQUFvRDtBQUNoRSxhQUFPQSxTQUFBQSxZQUFZLFNBQVMsUUFBUSxHQUFHLFlBQVksR0FBRyxJQUFJO0FBQUEsSUFDNUQ7QUFBQSxJQUNBLGdCQUFnQixNQUFzRDtBQUNwRSxhQUFPQSxTQUFBQSxZQUFZLFNBQVMsUUFBUSxHQUFHLGNBQWMsR0FBRyxJQUFJO0FBQUEsSUFDOUQ7QUFBQSxFQUNGO0FBQUEsRUFDQSxPQUFPO0FBQUEsSUFDTCxJQUFJLEtBQWEsY0FBd0I7QUFDdkMsYUFBT0EsU0FBQUEsWUFBWSxTQUFTLFFBQVEsTUFBTSxLQUFLLEtBQUssWUFBWTtBQUFBLElBQ2xFO0FBQUEsSUFDQSxPQUFPLE1BQWdEO0FBQ3JEQSxlQUFBLFlBQVksS0FBSyxRQUFRLE1BQU0sS0FBSyxHQUFHLElBQUk7QUFBQSxJQUM3QztBQUFBLEVBQ0Y7QUFBQSxFQUNBLEtBQUs7QUFBQSxJQUNILE1BQU0sa0JBQWtCLEtBQWEsVUFBa0IsVUFBa0I7QUFDakUsWUFBQSxTQUFTLE1BQU1BLFNBQUFBLFlBQVk7QUFBQSxRQUMvQixRQUFRLElBQUk7QUFBQSxRQUNaO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUFBO0FBRUssYUFBQTtBQUFBLElBQ1Q7QUFBQSxJQUNBLE1BQU0sY0FBYyxlQUF1QixtQkFBMkI7QUFDOUQsWUFBQSxTQUFTLE1BQU1BLFNBQUFBLFlBQVk7QUFBQSxRQUMvQixRQUFRLElBQUk7QUFBQSxRQUNaO0FBQUEsUUFDQTtBQUFBLE1BQUE7QUFFSyxhQUFBO0FBQUEsSUFDVDtBQUFBLElBQ0EsTUFBTSxVQUFVLGVBQXVCLFlBQXNCO0FBQ3JELFlBQUEsU0FBUyxNQUFNQSxTQUFZLFlBQUEsT0FBTyxRQUFRLElBQUksV0FBVyxlQUFlLFVBQVU7QUFDakYsYUFBQTtBQUFBLElBQ1Q7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsifQ==
