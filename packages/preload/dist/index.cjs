"use strict";
const electron = require("electron");
const channel = {
  app: {
    getPath: "app.getPath"
  },
  dialog: "dialog",
  path: {
    resolve: "path.resolve",
    join: "path.join",
    sep: "path.sep"
  },
  fs: {
    existsSync: "fs.existsSync",
    removeSync: "fs.removeSync",
    emptyDirSync: "fs.emptyDirSync"
  },
  store: {
    get: "store.get",
    set: "store.set"
  },
  git: {
    repositoryAuthUrl: "git.repositoryAuthUrl",
    branchSummary: "git.branchSummary",
    logResult: "git.logResult"
  }
};
electron.contextBridge.exposeInMainWorld("electron", {
  app: {
    getPath(...args) {
      return electron.ipcRenderer.sendSync(channel.app.getPath, ...args);
    }
  },
  async dialog(options) {
    const result = await electron.ipcRenderer.invoke(channel.dialog, options);
    return result;
  },
  path: {
    resolve(...args) {
      return electron.ipcRenderer.sendSync(channel.path.resolve, ...args);
    },
    join(...args) {
      return electron.ipcRenderer.sendSync(channel.path.join, ...args);
    },
    sep() {
      return electron.ipcRenderer.sendSync(channel.path.sep);
    }
  },
  fs: {
    existsSync(...args) {
      return electron.ipcRenderer.sendSync(channel.fs.existsSync, ...args);
    },
    removeSync(...args) {
      return electron.ipcRenderer.sendSync(channel.fs.removeSync, ...args);
    },
    emptyDirSync(...args) {
      return electron.ipcRenderer.sendSync(channel.fs.emptyDirSync, ...args);
    }
  },
  store: {
    get(key, defaultValue) {
      return electron.ipcRenderer.sendSync(channel.store.get, key, defaultValue);
    },
    set(...args) {
      electron.ipcRenderer.send(channel.store.set, ...args);
    }
  },
  git: {
    async repositoryAuthUrl(url, username, password) {
      const result = await electron.ipcRenderer.invoke(
        channel.git.repositoryAuthUrl,
        url,
        username,
        password
      );
      return result;
    },
    async branchSummary(directoryPath, repositoryAuthUrl) {
      const result = await electron.ipcRenderer.invoke(
        channel.git.branchSummary,
        directoryPath,
        repositoryAuthUrl
      );
      return result;
    },
    async logResult(directoryPath, logOptions) {
      const result = await electron.ipcRenderer.invoke(channel.git.logResult, directoryPath, logOptions);
      return result;
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzIiwic291cmNlcyI6WyIuLi8uLi9jb21tb24vc3JjL2NoYW5uZWwudHMiLCIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuICBhcHA6IHtcbiAgICBnZXRQYXRoOiAnYXBwLmdldFBhdGgnLFxuICB9LFxuICBkaWFsb2c6ICdkaWFsb2cnLFxuICBwYXRoOiB7XG4gICAgcmVzb2x2ZTogJ3BhdGgucmVzb2x2ZScsXG4gICAgam9pbjogJ3BhdGguam9pbicsXG4gICAgc2VwOiAncGF0aC5zZXAnLFxuICB9LFxuICBmczoge1xuICAgIGV4aXN0c1N5bmM6ICdmcy5leGlzdHNTeW5jJyxcbiAgICByZW1vdmVTeW5jOiAnZnMucmVtb3ZlU3luYycsXG4gICAgZW1wdHlEaXJTeW5jOiAnZnMuZW1wdHlEaXJTeW5jJyxcbiAgfSxcbiAgc3RvcmU6IHtcbiAgICBnZXQ6ICdzdG9yZS5nZXQnLFxuICAgIHNldDogJ3N0b3JlLnNldCcsXG4gIH0sXG4gIGdpdDoge1xuICAgIHJlcG9zaXRvcnlBdXRoVXJsOiAnZ2l0LnJlcG9zaXRvcnlBdXRoVXJsJyxcbiAgICBicmFuY2hTdW1tYXJ5OiAnZ2l0LmJyYW5jaFN1bW1hcnknLFxuICAgIGxvZ1Jlc3VsdDogJ2dpdC5sb2dSZXN1bHQnLFxuICB9LFxufTtcbiIsIi8qIGVzbGludC1lbnYgbm9kZSAqL1xuLyoqXG4gKiBUaGlzIGZpbGUgaXMgdXNlZCBzcGVjaWZpY2FsbHkgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG4gKiBIZXJlIHlvdSBjYW4gYWNjZXNzIE5vZGVqcyBzdHVmZiBhbmQgaW5qZWN0IGZ1bmN0aW9uYWxpdHkgaW50b1xuICogdGhlIHJlbmRlcmVyIHRocmVhZCAoYWNjZXNzaWJsZSB0aGVyZSB0aHJvdWdoIHRoZSBcIndpbmRvd1wiIG9iamVjdClcbiAqXG4gKiBXQVJOSU5HIVxuICogSWYgeW91IGltcG9ydCBhbnl0aGluZyBmcm9tIG5vZGVfbW9kdWxlcywgdGhlbiBtYWtlIHN1cmUgdGhhdCB0aGUgcGFja2FnZSBpcyBzcGVjaWZpZWRcbiAqIGluIHBhY2thZ2UuanNvbiA+IGRlcGVuZGVuY2llcyBhbmQgTk9UIGluIGRldkRlcGVuZGVuY2llc1xuICpcbiAqIEV4YW1wbGUgKGluamVjdHMgd2luZG93Lm15QVBJLmRvQVRoaW5nKCkgaW50byByZW5kZXJlciB0aHJlYWQpOlxuICpcbiAqICAgaW1wb3J0IHsgY29udGV4dEJyaWRnZSB9IGZyb20gJ2VsZWN0cm9uJ1xuICpcbiAqICAgY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnbXlBUEknLCB7XG4gKiAgICAgZG9BVGhpbmc6ICgpID0+IHt9XG4gKiAgIH0pXG4gKi9cblxuaW1wb3J0IHR5cGUge1dpbmRvd0VsZWN0cm9uUGFyYW1ldGVyc30gZnJvbSAnKi52dWV8dHN8dHN4JztcbmltcG9ydCBjaGFubmVsIGZyb20gJ0AvY29tbW9uL2NoYW5uZWwnO1xuaW1wb3J0IHR5cGUge09wZW5EaWFsb2dPcHRpb25zLCBPcGVuRGlhbG9nUmV0dXJuVmFsdWV9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7Y29udGV4dEJyaWRnZSwgaXBjUmVuZGVyZXJ9IGZyb20gJ2VsZWN0cm9uJztcblxuY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnZWxlY3Ryb24nLCB7XG4gIGFwcDoge1xuICAgIGdldFBhdGgoLi4uYXJnczogV2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzWydhcHAnXVsnZ2V0UGF0aCddKSB7XG4gICAgICByZXR1cm4gaXBjUmVuZGVyZXIuc2VuZFN5bmMoY2hhbm5lbC5hcHAuZ2V0UGF0aCwgLi4uYXJncyk7XG4gICAgfSxcbiAgfSxcbiAgYXN5bmMgZGlhbG9nKG9wdGlvbnM6IE9wZW5EaWFsb2dPcHRpb25zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaXBjUmVuZGVyZXIuaW52b2tlKGNoYW5uZWwuZGlhbG9nLCBvcHRpb25zKTtcbiAgICByZXR1cm4gcmVzdWx0IGFzIE9wZW5EaWFsb2dSZXR1cm5WYWx1ZTtcbiAgfSxcbiAgcGF0aDoge1xuICAgIHJlc29sdmUoLi4uYXJnczogV2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzWydwYXRoJ11bJ3Jlc29sdmUnXSkge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwucGF0aC5yZXNvbHZlLCAuLi5hcmdzKTtcbiAgICB9LFxuICAgIGpvaW4oLi4uYXJnczogV2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzWydwYXRoJ11bJ2pvaW4nXSkge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwucGF0aC5qb2luLCAuLi5hcmdzKTtcbiAgICB9LFxuICAgIHNlcCgpIHtcbiAgICAgIHJldHVybiBpcGNSZW5kZXJlci5zZW5kU3luYyhjaGFubmVsLnBhdGguc2VwKTtcbiAgICB9LFxuICB9LFxuICBmczoge1xuICAgIGV4aXN0c1N5bmMoLi4uYXJnczogV2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzWydmcyddWydleGlzdHNTeW5jJ10pIHtcbiAgICAgIHJldHVybiBpcGNSZW5kZXJlci5zZW5kU3luYyhjaGFubmVsLmZzLmV4aXN0c1N5bmMsIC4uLmFyZ3MpO1xuICAgIH0sXG4gICAgcmVtb3ZlU3luYyguLi5hcmdzOiBXaW5kb3dFbGVjdHJvblBhcmFtZXRlcnNbJ2ZzJ11bJ3JlbW92ZVN5bmMnXSkge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwuZnMucmVtb3ZlU3luYywgLi4uYXJncyk7XG4gICAgfSxcbiAgICBlbXB0eURpclN5bmMoLi4uYXJnczogV2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzWydmcyddWydlbXB0eURpclN5bmMnXSkge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwuZnMuZW1wdHlEaXJTeW5jLCAuLi5hcmdzKTtcbiAgICB9LFxuICB9LFxuICBzdG9yZToge1xuICAgIGdldChrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogdW5rbm93bikge1xuICAgICAgcmV0dXJuIGlwY1JlbmRlcmVyLnNlbmRTeW5jKGNoYW5uZWwuc3RvcmUuZ2V0LCBrZXksIGRlZmF1bHRWYWx1ZSk7XG4gICAgfSxcbiAgICBzZXQoLi4uYXJnczogV2luZG93RWxlY3Ryb25QYXJhbWV0ZXJzWydzdG9yZSddWydzZXQnXSkge1xuICAgICAgaXBjUmVuZGVyZXIuc2VuZChjaGFubmVsLnN0b3JlLnNldCwgLi4uYXJncyk7XG4gICAgfSxcbiAgfSxcbiAgZ2l0OiB7XG4gICAgYXN5bmMgcmVwb3NpdG9yeUF1dGhVcmwodXJsOiBzdHJpbmcsIHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGlwY1JlbmRlcmVyLmludm9rZShcbiAgICAgICAgY2hhbm5lbC5naXQucmVwb3NpdG9yeUF1dGhVcmwsXG4gICAgICAgIHVybCxcbiAgICAgICAgdXNlcm5hbWUsXG4gICAgICAgIHBhc3N3b3JkLFxuICAgICAgKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcbiAgICBhc3luYyBicmFuY2hTdW1tYXJ5KGRpcmVjdG9yeVBhdGg6IHN0cmluZywgcmVwb3NpdG9yeUF1dGhVcmw6IHN0cmluZykge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaXBjUmVuZGVyZXIuaW52b2tlKFxuICAgICAgICBjaGFubmVsLmdpdC5icmFuY2hTdW1tYXJ5LFxuICAgICAgICBkaXJlY3RvcnlQYXRoLFxuICAgICAgICByZXBvc2l0b3J5QXV0aFVybCxcbiAgICAgICk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgYXN5bmMgbG9nUmVzdWx0KGRpcmVjdG9yeVBhdGg6IHN0cmluZywgbG9nT3B0aW9uczogc3RyaW5nW10pIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGlwY1JlbmRlcmVyLmludm9rZShjaGFubmVsLmdpdC5sb2dSZXN1bHQsIGRpcmVjdG9yeVBhdGgsIGxvZ09wdGlvbnMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICB9LFxufSk7XG4iXSwibmFtZXMiOlsiY29udGV4dEJyaWRnZSIsImlwY1JlbmRlcmVyIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQWUsVUFBQTtBQUFBLEVBQ2IsS0FBSztBQUFBLElBQ0gsU0FBUztBQUFBLEVBQ1g7QUFBQSxFQUNBLFFBQVE7QUFBQSxFQUNSLE1BQU07QUFBQSxJQUNKLFNBQVM7QUFBQSxJQUNULE1BQU07QUFBQSxJQUNOLEtBQUs7QUFBQSxFQUNQO0FBQUEsRUFDQSxJQUFJO0FBQUEsSUFDRixZQUFZO0FBQUEsSUFDWixZQUFZO0FBQUEsSUFDWixjQUFjO0FBQUEsRUFDaEI7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxJQUNMLEtBQUs7QUFBQSxFQUNQO0FBQUEsRUFDQSxLQUFLO0FBQUEsSUFDSCxtQkFBbUI7QUFBQSxJQUNuQixlQUFlO0FBQUEsSUFDZixXQUFXO0FBQUEsRUFDYjtBQUNGO0FDQUFBLFNBQUFBLGNBQWMsa0JBQWtCLFlBQVk7QUFBQSxFQUMxQyxLQUFLO0FBQUEsSUFDSCxXQUFXLE1BQWtEO0FBQzNELGFBQU9DLFNBQUFBLFlBQVksU0FBUyxRQUFRLElBQUksU0FBUyxHQUFHLElBQUk7QUFBQSxJQUMxRDtBQUFBLEVBQ0Y7QUFBQSxFQUNBLE1BQU0sT0FBTyxTQUE0QjtBQUN2QyxVQUFNLFNBQVMsTUFBTUEscUJBQVksT0FBTyxRQUFRLFFBQVEsT0FBTztBQUN4RCxXQUFBO0FBQUEsRUFDVDtBQUFBLEVBQ0EsTUFBTTtBQUFBLElBQ0osV0FBVyxNQUFtRDtBQUM1RCxhQUFPQSxTQUFBQSxZQUFZLFNBQVMsUUFBUSxLQUFLLFNBQVMsR0FBRyxJQUFJO0FBQUEsSUFDM0Q7QUFBQSxJQUNBLFFBQVEsTUFBZ0Q7QUFDdEQsYUFBT0EsU0FBQUEsWUFBWSxTQUFTLFFBQVEsS0FBSyxNQUFNLEdBQUcsSUFBSTtBQUFBLElBQ3hEO0FBQUEsSUFDQSxNQUFNO0FBQ0osYUFBT0EsU0FBWSxZQUFBLFNBQVMsUUFBUSxLQUFLLEdBQUc7QUFBQSxJQUM5QztBQUFBLEVBQ0Y7QUFBQSxFQUNBLElBQUk7QUFBQSxJQUNGLGNBQWMsTUFBb0Q7QUFDaEUsYUFBT0EsU0FBQUEsWUFBWSxTQUFTLFFBQVEsR0FBRyxZQUFZLEdBQUcsSUFBSTtBQUFBLElBQzVEO0FBQUEsSUFDQSxjQUFjLE1BQW9EO0FBQ2hFLGFBQU9BLFNBQUFBLFlBQVksU0FBUyxRQUFRLEdBQUcsWUFBWSxHQUFHLElBQUk7QUFBQSxJQUM1RDtBQUFBLElBQ0EsZ0JBQWdCLE1BQXNEO0FBQ3BFLGFBQU9BLFNBQUFBLFlBQVksU0FBUyxRQUFRLEdBQUcsY0FBYyxHQUFHLElBQUk7QUFBQSxJQUM5RDtBQUFBLEVBQ0Y7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLElBQUksS0FBYSxjQUF3QjtBQUN2QyxhQUFPQSxTQUFBQSxZQUFZLFNBQVMsUUFBUSxNQUFNLEtBQUssS0FBSyxZQUFZO0FBQUEsSUFDbEU7QUFBQSxJQUNBLE9BQU8sTUFBZ0Q7QUFDckRBLGVBQUEsWUFBWSxLQUFLLFFBQVEsTUFBTSxLQUFLLEdBQUcsSUFBSTtBQUFBLElBQzdDO0FBQUEsRUFDRjtBQUFBLEVBQ0EsS0FBSztBQUFBLElBQ0gsTUFBTSxrQkFBa0IsS0FBYSxVQUFrQixVQUFrQjtBQUNqRSxZQUFBLFNBQVMsTUFBTUEsU0FBQUEsWUFBWTtBQUFBLFFBQy9CLFFBQVEsSUFBSTtBQUFBLFFBQ1o7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQUE7QUFFSyxhQUFBO0FBQUEsSUFDVDtBQUFBLElBQ0EsTUFBTSxjQUFjLGVBQXVCLG1CQUEyQjtBQUM5RCxZQUFBLFNBQVMsTUFBTUEsU0FBQUEsWUFBWTtBQUFBLFFBQy9CLFFBQVEsSUFBSTtBQUFBLFFBQ1o7QUFBQSxRQUNBO0FBQUEsTUFBQTtBQUVLLGFBQUE7QUFBQSxJQUNUO0FBQUEsSUFDQSxNQUFNLFVBQVUsZUFBdUIsWUFBc0I7QUFDckQsWUFBQSxTQUFTLE1BQU1BLFNBQVksWUFBQSxPQUFPLFFBQVEsSUFBSSxXQUFXLGVBQWUsVUFBVTtBQUNqRixhQUFBO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7QUFDRixDQUFDOyJ9
