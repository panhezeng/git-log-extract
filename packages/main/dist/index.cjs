"use strict";
const electron = require("electron");
const path = require("path");
const url = require("url");
const Store = require("electron-store");
const fs = require("fs-extra");
const simpleGit = require("simple-git");
const _interopDefaultLegacy = (e) => e && typeof e === "object" && "default" in e ? e : { default: e };
const path__default = /* @__PURE__ */ _interopDefaultLegacy(path);
const Store__default = /* @__PURE__ */ _interopDefaultLegacy(Store);
const fs__default = /* @__PURE__ */ _interopDefaultLegacy(fs);
const simpleGit__default = /* @__PURE__ */ _interopDefaultLegacy(simpleGit);
async function createWindow() {
  const browserWindow = new electron.BrowserWindow({
    show: false,
    webPreferences: {
      preload: path.join(electron.app.getAppPath(), "packages/preload/dist/index.cjs")
    }
  });
  browserWindow.on("ready-to-show", () => {
    browserWindow == null ? void 0 : browserWindow.show();
    {
      browserWindow == null ? void 0 : browserWindow.webContents.openDevTools();
    }
  });
  const pageUrl = "http://localhost:5173/";
  await browserWindow.loadURL(pageUrl);
  return browserWindow;
}
async function restoreOrCreateWindow() {
  let window = electron.BrowserWindow.getAllWindows().find((w) => !w.isDestroyed());
  if (window === void 0) {
    window = await createWindow();
  }
  if (window.isMinimized()) {
    window.restore();
  }
  window.focus();
}
const channel = {
  app: {
    getPath: "getPath"
  },
  dialog: "dialog",
  path: {
    resolve: "resolve",
    join: "join",
    sep: "sep"
  },
  fs: {
    existsSync: "existsSync",
    removeSync: "removeSync",
    emptyDirSync: "emptyDirSync"
  },
  store: {
    get: "get",
    set: "set"
  },
  git: {
    repositoryAuthUrl: "repositoryAuthUrl",
    branchSummary: "branchSummary",
    logResult: "logResult"
  }
};
const appTitle = "Git Log Extract";
electron.ipcMain.handle(channel.dialog, async (event, options) => {
  return await electron.dialog.showOpenDialog(options);
});
electron.ipcMain.on(
  channel.app.getPath,
  async (event, ...args) => {
    event.returnValue = electron.app.getPath(...args);
  }
);
electron.ipcMain.on(
  channel.path.resolve,
  async (event, ...args) => {
    event.returnValue = path__default.default.resolve(...args);
  }
);
electron.ipcMain.on(channel.path.join, async (event, ...args) => {
  event.returnValue = path__default.default.join(...args);
});
electron.ipcMain.on(channel.path.sep, async (event) => {
  event.returnValue = path__default.default.sep;
});
electron.ipcMain.on(
  channel.fs.existsSync,
  async (event, ...args) => {
    event.returnValue = fs__default.default.existsSync(...args);
  }
);
electron.ipcMain.on(
  channel.fs.removeSync,
  async (event, ...args) => {
    event.returnValue = fs__default.default.removeSync(...args);
  }
);
electron.ipcMain.on(
  channel.fs.emptyDirSync,
  async (event, ...args) => {
    event.returnValue = fs__default.default.emptyDirSync(...args);
  }
);
const store = new Store__default.default({
  name: "git-log-extract-main-config",
  cwd: path__default.default.join(electron.app.getPath("appData"), appTitle)
});
electron.ipcMain.on(channel.store.set, async (event, ...args) => {
  store.set(...args);
});
electron.ipcMain.on(channel.store.get, async (event, key, defaultValue) => {
  event.returnValue = store.get(key, defaultValue);
});
electron.ipcMain.handle(
  channel.git.repositoryAuthUrl,
  async (event, url$1, username, password) => {
    const urlObj = new url.URL(url$1);
    urlObj.username = username;
    urlObj.password = password;
    return urlObj.href;
  }
);
function createGit(options, onProgress) {
  if (typeof options === "undefined") {
    options = { baseDir: "" };
  }
  const git = simpleGit__default.default(options);
  git.outputHandler((bin, stdout, stderr, args) => {
    stdout.pipe(process.stdout);
    stderr.pipe(process.stderr);
    stderr.on("data", function(stdData) {
      if (onProgress) {
        onProgress(stdData.toString());
      }
    });
  });
  return git;
}
electron.ipcMain.handle(
  channel.git.branchSummary,
  async (event, directoryPath, repositoryAuthUrl) => {
    const git = createGit({
      baseDir: directoryPath
    });
    await git.init();
    await git.addRemote("origin", repositoryAuthUrl);
    await git.fetch(['--shallow-since="1 months ago"']);
    const branchSummary = await git.branch(["-r"]);
    return branchSummary;
  }
);
electron.ipcMain.handle(
  channel.git.logResult,
  async (event, directoryPath, logOptions) => {
    const git = createGit({ baseDir: directoryPath });
    await git.fetch(['--shallow-since="1 months ago"']);
    const logResult = await git.log(logOptions);
    return logResult;
  }
);
const isSingleInstance = electron.app.requestSingleInstanceLock();
if (!isSingleInstance) {
  electron.app.quit();
  process.exit(0);
}
electron.app.on("second-instance", restoreOrCreateWindow);
electron.app.disableHardwareAcceleration();
electron.app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    electron.app.quit();
  }
});
electron.app.on("activate", restoreOrCreateWindow);
electron.app.whenReady().then(restoreOrCreateWindow).catch((e) => console.error("Failed create window:", e));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
